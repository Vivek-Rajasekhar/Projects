
BB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800276c  0800276c  0000376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c0  080027c0  00004014  2**0
                  CONTENTS
  4 .ARM          00000008  080027c0  080027c0  000037c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027c8  080027c8  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c8  080027c8  000037c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027cc  080027cc  000037cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080027d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000014  080027e4  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080027e4  000040f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b9e  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a4  00000000  00000000  0000cbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0000e488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059a  00000000  00000000  0000ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001609f  00000000  00000000  0000f17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009779  00000000  00000000  00025219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1de  00000000  00000000  0002e992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bab70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d44  00000000  00000000  000babb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000bc8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002754 	.word	0x08002754

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08002754 	.word	0x08002754

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96a 	b.w	80004d0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	460c      	mov	r4, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14e      	bne.n	80002be <__udivmoddi4+0xaa>
 8000220:	4694      	mov	ip, r2
 8000222:	458c      	cmp	ip, r1
 8000224:	4686      	mov	lr, r0
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	d962      	bls.n	80002f2 <__udivmoddi4+0xde>
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0320 	rsb	r3, r2, #32
 8000232:	4091      	lsls	r1, r2
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	4319      	orrs	r1, r3
 800023e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000242:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000246:	fa1f f68c 	uxth.w	r6, ip
 800024a:	fbb1 f4f7 	udiv	r4, r1, r7
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	fb07 1114 	mls	r1, r7, r4, r1
 8000256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025a:	fb04 f106 	mul.w	r1, r4, r6
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f104 30ff 	add.w	r0, r4, #4294967295
 800026a:	f080 8112 	bcs.w	8000492 <__udivmoddi4+0x27e>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 810f 	bls.w	8000492 <__udivmoddi4+0x27e>
 8000274:	3c02      	subs	r4, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a59      	subs	r1, r3, r1
 800027a:	fa1f f38e 	uxth.w	r3, lr
 800027e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000282:	fb07 1110 	mls	r1, r7, r0, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb00 f606 	mul.w	r6, r0, r6
 800028e:	429e      	cmp	r6, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f100 31ff 	add.w	r1, r0, #4294967295
 800029a:	f080 80fc 	bcs.w	8000496 <__udivmoddi4+0x282>
 800029e:	429e      	cmp	r6, r3
 80002a0:	f240 80f9 	bls.w	8000496 <__udivmoddi4+0x282>
 80002a4:	4463      	add	r3, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	1b9b      	subs	r3, r3, r6
 80002aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa6>
 80002b2:	40d3      	lsrs	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xba>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb4>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa6>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x150>
 80002d6:	42a3      	cmp	r3, r4
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xcc>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f0c0 80f0 	bcc.w	80004c0 <__udivmoddi4+0x2ac>
 80002e0:	1a86      	subs	r6, r0, r2
 80002e2:	eb64 0303 	sbc.w	r3, r4, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d0e6      	beq.n	80002ba <__udivmoddi4+0xa6>
 80002ec:	e9c5 6300 	strd	r6, r3, [r5]
 80002f0:	e7e3      	b.n	80002ba <__udivmoddi4+0xa6>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x204>
 80002f8:	eba1 040c 	sub.w	r4, r1, ip
 80002fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000300:	fa1f f78c 	uxth.w	r7, ip
 8000304:	2101      	movs	r1, #1
 8000306:	fbb4 f6f8 	udiv	r6, r4, r8
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb08 4416 	mls	r4, r8, r6, r4
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	fb07 f006 	mul.w	r0, r7, r6
 800031a:	4298      	cmp	r0, r3
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x11c>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 34ff 	add.w	r4, r6, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x11a>
 8000328:	4298      	cmp	r0, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 800032e:	4626      	mov	r6, r4
 8000330:	1a1c      	subs	r4, r3, r0
 8000332:	fa1f f38e 	uxth.w	r3, lr
 8000336:	fbb4 f0f8 	udiv	r0, r4, r8
 800033a:	fb08 4410 	mls	r4, r8, r0, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb00 f707 	mul.w	r7, r0, r7
 8000346:	429f      	cmp	r7, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x148>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x146>
 8000354:	429f      	cmp	r7, r3
 8000356:	f200 80b0 	bhi.w	80004ba <__udivmoddi4+0x2a6>
 800035a:	4620      	mov	r0, r4
 800035c:	1bdb      	subs	r3, r3, r7
 800035e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x9c>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa20 fc06 	lsr.w	ip, r0, r6
 8000374:	fa04 f301 	lsl.w	r3, r4, r1
 8000378:	ea43 030c 	orr.w	r3, r3, ip
 800037c:	40f4      	lsrs	r4, r6
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	0c38      	lsrs	r0, r7, #16
 8000384:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000388:	fbb4 fef0 	udiv	lr, r4, r0
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	fb00 441e 	mls	r4, r0, lr, r4
 8000394:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000398:	fb0e f90c 	mul.w	r9, lr, ip
 800039c:	45a1      	cmp	r9, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x1a6>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003aa:	f080 8084 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8081 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80003b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b8:	443c      	add	r4, r7
 80003ba:	eba4 0409 	sub.w	r4, r4, r9
 80003be:	fa1f f983 	uxth.w	r9, r3
 80003c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1d2>
 80003d6:	193c      	adds	r4, r7, r4
 80003d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003dc:	d267      	bcs.n	80004ae <__udivmoddi4+0x29a>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d965      	bls.n	80004ae <__udivmoddi4+0x29a>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ea:	fba0 9302 	umull	r9, r3, r0, r2
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	429c      	cmp	r4, r3
 80003f4:	46ce      	mov	lr, r9
 80003f6:	469c      	mov	ip, r3
 80003f8:	d351      	bcc.n	800049e <__udivmoddi4+0x28a>
 80003fa:	d04e      	beq.n	800049a <__udivmoddi4+0x286>
 80003fc:	b155      	cbz	r5, 8000414 <__udivmoddi4+0x200>
 80003fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000402:	eb64 040c 	sbc.w	r4, r4, ip
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	40cb      	lsrs	r3, r1
 800040c:	431e      	orrs	r6, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c5 6400 	strd	r6, r4, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	e750      	b.n	80002ba <__udivmoddi4+0xa6>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f103 	lsr.w	r1, r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa24 f303 	lsr.w	r3, r4, r3
 8000428:	4094      	lsls	r4, r2
 800042a:	430c      	orrs	r4, r1
 800042c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000430:	fa00 fe02 	lsl.w	lr, r0, r2
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3110 	mls	r1, r8, r0, r3
 8000440:	0c23      	lsrs	r3, r4, #16
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f107 	mul.w	r1, r0, r7
 800044a:	4299      	cmp	r1, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x24c>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 36ff 	add.w	r6, r0, #4294967295
 8000456:	d22c      	bcs.n	80004b2 <__udivmoddi4+0x29e>
 8000458:	4299      	cmp	r1, r3
 800045a:	d92a      	bls.n	80004b2 <__udivmoddi4+0x29e>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000470:	fb01 f307 	mul.w	r3, r1, r7
 8000474:	42a3      	cmp	r3, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x276>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000480:	d213      	bcs.n	80004aa <__udivmoddi4+0x296>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d911      	bls.n	80004aa <__udivmoddi4+0x296>
 8000486:	3902      	subs	r1, #2
 8000488:	4464      	add	r4, ip
 800048a:	1ae4      	subs	r4, r4, r3
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	e739      	b.n	8000306 <__udivmoddi4+0xf2>
 8000492:	4604      	mov	r4, r0
 8000494:	e6f0      	b.n	8000278 <__udivmoddi4+0x64>
 8000496:	4608      	mov	r0, r1
 8000498:	e706      	b.n	80002a8 <__udivmoddi4+0x94>
 800049a:	45c8      	cmp	r8, r9
 800049c:	d2ae      	bcs.n	80003fc <__udivmoddi4+0x1e8>
 800049e:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a8      	b.n	80003fc <__udivmoddi4+0x1e8>
 80004aa:	4631      	mov	r1, r6
 80004ac:	e7ed      	b.n	800048a <__udivmoddi4+0x276>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e799      	b.n	80003e6 <__udivmoddi4+0x1d2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	e7d4      	b.n	8000460 <__udivmoddi4+0x24c>
 80004b6:	46d6      	mov	lr, sl
 80004b8:	e77f      	b.n	80003ba <__udivmoddi4+0x1a6>
 80004ba:	4463      	add	r3, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e74d      	b.n	800035c <__udivmoddi4+0x148>
 80004c0:	4606      	mov	r6, r0
 80004c2:	4623      	mov	r3, r4
 80004c4:	4608      	mov	r0, r1
 80004c6:	e70f      	b.n	80002e8 <__udivmoddi4+0xd4>
 80004c8:	3e02      	subs	r6, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	e730      	b.n	8000330 <__udivmoddi4+0x11c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80004d4:	b5b0      	push	{r4, r5, r7, lr}
 80004d6:	b08a      	sub	sp, #40	@ 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80004e2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80004e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 80004ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80004ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 80004f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80004f2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80004f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80004f6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f80e 	bl	800052a <Lcd_init>

	return lcd;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	461d      	mov	r5, r3
 8000512:	f107 0410 	add.w	r4, r7, #16
 8000516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800051a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800051e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	3728      	adds	r7, #40	@ 0x28
 8000526:	46bd      	mov	sp, r7
 8000528:	bdb0      	pop	{r4, r5, r7, pc}

0800052a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	7d9b      	ldrb	r3, [r3, #22]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d10c      	bne.n	8000554 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800053a:	2133      	movs	r1, #51	@ 0x33
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f863 	bl	8000608 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000542:	2132      	movs	r1, #50	@ 0x32
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f85f 	bl	8000608 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800054a:	2128      	movs	r1, #40	@ 0x28
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f85b 	bl	8000608 <lcd_write_command>
 8000552:	e003      	b.n	800055c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000554:	2138      	movs	r1, #56	@ 0x38
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f856 	bl	8000608 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800055c:	2101      	movs	r1, #1
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 f852 	bl	8000608 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000564:	210c      	movs	r1, #12
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f84e 	bl	8000608 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800056c:	2106      	movs	r1, #6
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f84a 	bl	8000608 <lcd_write_command>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e00a      	b.n	80005a2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	4413      	add	r3, r2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f864 	bl	8000664 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	3301      	adds	r3, #1
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	7bfc      	ldrb	r4, [r7, #15]
 80005a4:	6838      	ldr	r0, [r7, #0]
 80005a6:	f7ff fe15 	bl	80001d4 <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	429c      	cmp	r4, r3
 80005ae:	d3ed      	bcc.n	800058c <Lcd_string+0x10>
	}
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd90      	pop	{r4, r7, pc}
	...

080005bc <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
 80005c8:	4613      	mov	r3, r2
 80005ca:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <Lcd_cursor+0x30>)
 80005d0:	5cd2      	ldrb	r2, [r2, r3]
 80005d2:	78bb      	ldrb	r3, [r7, #2]
 80005d4:	4413      	add	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	3b80      	subs	r3, #128	@ 0x80
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f812 	bl	8000608 <lcd_write_command>
	#endif
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	080027b4 	.word	0x080027b4

080005f0 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80005f8:	2101      	movs	r1, #1
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f804 	bl	8000608 <lcd_write_command>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6898      	ldr	r0, [r3, #8]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	899b      	ldrh	r3, [r3, #12]
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	f000 ffaa 	bl	8001578 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	7d9b      	ldrb	r3, [r3, #22]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d111      	bne.n	8000650 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	091b      	lsrs	r3, r3, #4
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2204      	movs	r2, #4
 8000634:	4619      	mov	r1, r3
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f842 	bl	80006c0 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2204      	movs	r2, #4
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f839 	bl	80006c0 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800064e:	e005      	b.n	800065c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2208      	movs	r2, #8
 8000654:	4619      	mov	r1, r3
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f832 	bl	80006c0 <lcd_write>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6898      	ldr	r0, [r3, #8]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	899b      	ldrh	r3, [r3, #12]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	f000 ff7c 	bl	8001578 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7d9b      	ldrb	r3, [r3, #22]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d111      	bne.n	80006ac <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	091b      	lsrs	r3, r3, #4
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2204      	movs	r2, #4
 8000690:	4619      	mov	r1, r3
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f814 	bl	80006c0 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2204      	movs	r2, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f80b 	bl	80006c0 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80006aa:	e005      	b.n	80006b8 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2208      	movs	r2, #8
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f804 	bl	80006c0 <lcd_write>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
 80006cc:	4613      	mov	r3, r2
 80006ce:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e019      	b.n	800070a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	685a      	ldr	r2, [r3, #4]
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	8819      	ldrh	r1, [r3, #0]
 80006ee:	78fa      	ldrb	r2, [r7, #3]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	fa42 f303 	asr.w	r3, r2, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	f000 ff3a 	bl	8001578 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	3301      	adds	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	7bfa      	ldrb	r2, [r7, #15]
 800070c:	78bb      	ldrb	r3, [r7, #2]
 800070e:	429a      	cmp	r2, r3
 8000710:	d3e1      	bcc.n	80006d6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6918      	ldr	r0, [r3, #16]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	8a9b      	ldrh	r3, [r3, #20]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f000 ff2b 	bl	8001578 <HAL_GPIO_WritePin>
	DELAY(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f000 fbdc 	bl	8000ee0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6918      	ldr	r0, [r3, #16]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	8a9b      	ldrh	r3, [r3, #20]
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	f000 ff20 	bl	8001578 <HAL_GPIO_WritePin>
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <main>:
uint32_t scroll_interval = 300;       // Delay in milliseconds for scrolling speed

/* USER CODE END 0 */

int main(void)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b090      	sub	sp, #64	@ 0x40
 8000744:	af04      	add	r7, sp, #16
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 8000746:	f000 fb59 	bl	8000dfc <HAL_Init>
    SystemClock_Config();
 800074a:	f000 fa5b 	bl	8000c04 <SystemClock_Config>
    MX_GPIO_Init();
 800074e:	f000 fa0b 	bl	8000b68 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8000752:	f000 f86b 	bl	800082c <MX_USART1_UART_Init>

    /* USER CODE BEGIN 2 */
    // Define the ports and pins for D4-D7 pins (4-bit mode)
    Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000756:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <main+0xc8>)
 8000758:	f107 0420 	add.w	r4, r7, #32
 800075c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800075e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = { GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_10 };
 8000762:	4a2a      	ldr	r2, [pc, #168]	@ (800080c <main+0xcc>)
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800076c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize the LCD in 4-bit mode with RS on PA1, E on PA3
    lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 8000770:	4c27      	ldr	r4, [pc, #156]	@ (8000810 <main+0xd0>)
 8000772:	4638      	mov	r0, r7
 8000774:	f107 0218 	add.w	r2, r7, #24
 8000778:	f107 0120 	add.w	r1, r7, #32
 800077c:	2300      	movs	r3, #0
 800077e:	9303      	str	r3, [sp, #12]
 8000780:	2308      	movs	r3, #8
 8000782:	9302      	str	r3, [sp, #8]
 8000784:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <main+0xd4>)
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	2302      	movs	r3, #2
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <main+0xd4>)
 800078e:	f7ff fea1 	bl	80004d4 <Lcd_create>
 8000792:	4625      	mov	r5, r4
 8000794:	463c      	mov	r4, r7
 8000796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800079a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800079e:	e885 0003 	stmia.w	r5, {r0, r1}

    // Initialize and clear the LCD display
    HAL_Delay(50); // Allow time for the LCD to power up
 80007a2:	2032      	movs	r0, #50	@ 0x32
 80007a4:	f000 fb9c 	bl	8000ee0 <HAL_Delay>
    Lcd_init(&lcd);
 80007a8:	4819      	ldr	r0, [pc, #100]	@ (8000810 <main+0xd0>)
 80007aa:	f7ff febe 	bl	800052a <Lcd_init>
    Lcd_clear(&lcd);
 80007ae:	4818      	ldr	r0, [pc, #96]	@ (8000810 <main+0xd0>)
 80007b0:	f7ff ff1e 	bl	80005f0 <Lcd_clear>

    // Display initial message on the LCD
    Lcd_cursor(&lcd, 0, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2100      	movs	r1, #0
 80007b8:	4815      	ldr	r0, [pc, #84]	@ (8000810 <main+0xd0>)
 80007ba:	f7ff feff 	bl	80005bc <Lcd_cursor>
    Lcd_string(&lcd, "input");
 80007be:	4916      	ldr	r1, [pc, #88]	@ (8000818 <main+0xd8>)
 80007c0:	4813      	ldr	r0, [pc, #76]	@ (8000810 <main+0xd0>)
 80007c2:	f7ff fedb 	bl	800057c <Lcd_string>

    // Start receiving data via interrupt
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_buffer[rx_index], 1);
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <main+0xdc>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <main+0xe0>)
 80007d0:	4413      	add	r3, r2
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	4813      	ldr	r0, [pc, #76]	@ (8000824 <main+0xe4>)
 80007d8:	f000 fff7 	bl	80017ca <HAL_UART_Receive_IT>

    /* Infinite loop */
    while (1)
    {
        // If message is ready, parse and display it on the LCD
        if (message_ready)
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <main+0xe8>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0fa      	beq.n	80007dc <main+0x9c>
        {
            // Null-terminate the received message
            rx_buffer[rx_index] = '\0';
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <main+0xdc>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <main+0xe0>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	5499      	strb	r1, [r3, r2]

            // Process command-based control
            process_command(rx_buffer);
 80007f4:	480a      	ldr	r0, [pc, #40]	@ (8000820 <main+0xe0>)
 80007f6:	f000 f885 	bl	8000904 <process_command>

            // Reset flags and index for next message
            rx_index = 0;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <main+0xdc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
            message_ready = 0;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <main+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
        if (message_ready)
 8000806:	e7e9      	b.n	80007dc <main+0x9c>
 8000808:	08002774 	.word	0x08002774
 800080c:	08002784 	.word	0x08002784
 8000810:	20000078 	.word	0x20000078
 8000814:	40020000 	.word	0x40020000
 8000818:	0800276c 	.word	0x0800276c
 800081c:	200000d0 	.word	0x200000d0
 8000820:	20000090 	.word	0x20000090
 8000824:	20000030 	.word	0x20000030
 8000828:	200000d1 	.word	0x200000d1

0800082c <MX_USART1_UART_Init>:
    }
}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_USART1_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;           // Match this with your Bluetooth module's baud rate
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000838:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800083c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART1_UART_Init+0x4c>)
 8000864:	f000 fed6 	bl	8001614 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 800086e:	f000 f9d0 	bl	8000c12 <Error_Handler>
    }
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000030 	.word	0x20000030
 800087c:	40011000 	.word	0x40011000

08000880 <HAL_UART_RxCpltCallback>:

/* Callback function to handle received data */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Check if the interrupt is for USART1
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a18      	ldr	r2, [pc, #96]	@ (80008f0 <HAL_UART_RxCpltCallback+0x70>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12a      	bne.n	80008e8 <HAL_UART_RxCpltCallback+0x68>
    {
        // Ignore carriage return '\r' characters
        if (rx_buffer[rx_index] != '\r')
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <HAL_UART_RxCpltCallback+0x74>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <HAL_UART_RxCpltCallback+0x78>)
 800089c:	5c9b      	ldrb	r3, [r3, r2]
 800089e:	2b0d      	cmp	r3, #13
 80008a0:	d017      	beq.n	80008d2 <HAL_UART_RxCpltCallback+0x52>
        {
            // If received character is newline '\n', mark message as ready
            if (rx_buffer[rx_index] == '\n' || rx_index >= sizeof(rx_buffer) - 2)
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <HAL_UART_RxCpltCallback+0x74>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <HAL_UART_RxCpltCallback+0x78>)
 80008ac:	5c9b      	ldrb	r3, [r3, r2]
 80008ae:	2b0a      	cmp	r3, #10
 80008b0:	d004      	beq.n	80008bc <HAL_UART_RxCpltCallback+0x3c>
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <HAL_UART_RxCpltCallback+0x74>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b3d      	cmp	r3, #61	@ 0x3d
 80008ba:	d903      	bls.n	80008c4 <HAL_UART_RxCpltCallback+0x44>
            {
                message_ready = 1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_UART_RxCpltCallback+0x7c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	e006      	b.n	80008d2 <HAL_UART_RxCpltCallback+0x52>
                 // Set flag to indicate message is ready
            }
            else
            {
                rx_index++; // Move to the next index
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <HAL_UART_RxCpltCallback+0x74>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	3301      	adds	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_UART_RxCpltCallback+0x74>)
 80008d0:	701a      	strb	r2, [r3, #0]
            }
        }

        // Start the next reception

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_buffer[rx_index], 1);
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <HAL_UART_RxCpltCallback+0x74>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <HAL_UART_RxCpltCallback+0x78>)
 80008dc:	4413      	add	r3, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4807      	ldr	r0, [pc, #28]	@ (8000900 <HAL_UART_RxCpltCallback+0x80>)
 80008e4:	f000 ff71 	bl	80017ca <HAL_UART_Receive_IT>
    }
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40011000 	.word	0x40011000
 80008f4:	200000d0 	.word	0x200000d0
 80008f8:	20000090 	.word	0x20000090
 80008fc:	200000d1 	.word	0x200000d1
 8000900:	20000030 	.word	0x20000030

08000904 <process_command>:

/* Process command-based control */
void process_command(char *message)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b095      	sub	sp, #84	@ 0x54
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    char response[33];  // Buffer for response messages

    // Check for the "CLR" command
    if (strncmp(message, " CLR", 3) == 0)
 800090c:	2203      	movs	r2, #3
 800090e:	4957      	ldr	r1, [pc, #348]	@ (8000a6c <process_command+0x168>)
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f001 fed5 	bl	80026c0 <strncmp>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d113      	bne.n	8000944 <process_command+0x40>
    {
        Lcd_clear(&lcd);
 800091c:	4854      	ldr	r0, [pc, #336]	@ (8000a70 <process_command+0x16c>)
 800091e:	f7ff fe67 	bl	80005f0 <Lcd_clear>
        Lcd_cursor(&lcd, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	4852      	ldr	r0, [pc, #328]	@ (8000a70 <process_command+0x16c>)
 8000928:	f7ff fe48 	bl	80005bc <Lcd_cursor>
        Lcd_string(&lcd, "Screen Cleared");
 800092c:	4951      	ldr	r1, [pc, #324]	@ (8000a74 <process_command+0x170>)
 800092e:	4850      	ldr	r0, [pc, #320]	@ (8000a70 <process_command+0x16c>)
 8000930:	f7ff fe24 	bl	800057c <Lcd_string>
        HAL_Delay(2000);
 8000934:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000938:	f000 fad2 	bl	8000ee0 <HAL_Delay>
        Lcd_clear(&lcd);
 800093c:	484c      	ldr	r0, [pc, #304]	@ (8000a70 <process_command+0x16c>)
 800093e:	f7ff fe57 	bl	80005f0 <Lcd_clear>
            Lcd_clear(&lcd);
            Lcd_cursor(&lcd, 0, 0);
            Lcd_string(&lcd, a);
        }

}
 8000942:	e08f      	b.n	8000a64 <process_command+0x160>
    else if (strncmp(message, " 1 ", 3) == 0)
 8000944:	2203      	movs	r2, #3
 8000946:	494c      	ldr	r1, [pc, #304]	@ (8000a78 <process_command+0x174>)
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f001 feb9 	bl	80026c0 <strncmp>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d11d      	bne.n	8000990 <process_command+0x8c>
    	HAL_UART_Transmit(&huart1, (uint8_t *)message+3, strlen(message+3), HAL_MAX_DELAY);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1cdc      	adds	r4, r3, #3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3303      	adds	r3, #3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc39 	bl	80001d4 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	4621      	mov	r1, r4
 800096c:	4843      	ldr	r0, [pc, #268]	@ (8000a7c <process_command+0x178>)
 800096e:	f000 fea1 	bl	80016b4 <HAL_UART_Transmit>
        Lcd_clear(&lcd);
 8000972:	483f      	ldr	r0, [pc, #252]	@ (8000a70 <process_command+0x16c>)
 8000974:	f7ff fe3c 	bl	80005f0 <Lcd_clear>
        Lcd_cursor(&lcd, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	483c      	ldr	r0, [pc, #240]	@ (8000a70 <process_command+0x16c>)
 800097e:	f7ff fe1d 	bl	80005bc <Lcd_cursor>
        Lcd_string(&lcd, message + 3);  // Display after "LINE1:"
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3303      	adds	r3, #3
 8000986:	4619      	mov	r1, r3
 8000988:	4839      	ldr	r0, [pc, #228]	@ (8000a70 <process_command+0x16c>)
 800098a:	f7ff fdf7 	bl	800057c <Lcd_string>
}
 800098e:	e069      	b.n	8000a64 <process_command+0x160>
    else if (strncmp(message, " 2 ", 3) == 0)
 8000990:	2203      	movs	r2, #3
 8000992:	493b      	ldr	r1, [pc, #236]	@ (8000a80 <process_command+0x17c>)
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f001 fe93 	bl	80026c0 <strncmp>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d11d      	bne.n	80009dc <process_command+0xd8>
    {	HAL_UART_Transmit(&huart1, (uint8_t *)message+3, strlen(message+3), HAL_MAX_DELAY);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	1cdc      	adds	r4, r3, #3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3303      	adds	r3, #3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc13 	bl	80001d4 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	4621      	mov	r1, r4
 80009b8:	4830      	ldr	r0, [pc, #192]	@ (8000a7c <process_command+0x178>)
 80009ba:	f000 fe7b 	bl	80016b4 <HAL_UART_Transmit>
        Lcd_clear(&lcd);
 80009be:	482c      	ldr	r0, [pc, #176]	@ (8000a70 <process_command+0x16c>)
 80009c0:	f7ff fe16 	bl	80005f0 <Lcd_clear>
        Lcd_cursor(&lcd, 1, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	4829      	ldr	r0, [pc, #164]	@ (8000a70 <process_command+0x16c>)
 80009ca:	f7ff fdf7 	bl	80005bc <Lcd_cursor>
        Lcd_string(&lcd, message + 3);  // Display after "LINE2:"
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3303      	adds	r3, #3
 80009d2:	4619      	mov	r1, r3
 80009d4:	4826      	ldr	r0, [pc, #152]	@ (8000a70 <process_command+0x16c>)
 80009d6:	f7ff fdd1 	bl	800057c <Lcd_string>
}
 80009da:	e043      	b.n	8000a64 <process_command+0x160>
    else if (strncmp(message, " S: ", 3) == 0)
 80009dc:	2203      	movs	r2, #3
 80009de:	4929      	ldr	r1, [pc, #164]	@ (8000a84 <process_command+0x180>)
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f001 fe6d 	bl	80026c0 <strncmp>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d114      	bne.n	8000a16 <process_command+0x112>
    {	HAL_UART_Transmit(&huart1, (uint8_t *)message+4, strlen(message+4), HAL_MAX_DELAY);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	1d1c      	adds	r4, r3, #4
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3304      	adds	r3, #4
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fbed 	bl	80001d4 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	4621      	mov	r1, r4
 8000a04:	481d      	ldr	r0, [pc, #116]	@ (8000a7c <process_command+0x178>)
 8000a06:	f000 fe55 	bl	80016b4 <HAL_UART_Transmit>
    	scroll_text(message+4);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f83a 	bl	8000a88 <scroll_text>
}
 8000a14:	e026      	b.n	8000a64 <process_command+0x160>
        	strncpy(a, message+1, 32);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	1c59      	adds	r1, r3, #1
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2220      	movs	r2, #32
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fe5f 	bl	80026e4 <strncpy>
        	a[32] = '\0';
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        	HAL_UART_Transmit(&huart1, (uint8_t *)a, strlen(a), HAL_MAX_DELAY);
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fbcf 	bl	80001d4 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	f107 0108 	add.w	r1, r7, #8
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <process_command+0x178>)
 8000a44:	f000 fe36 	bl	80016b4 <HAL_UART_Transmit>
            Lcd_clear(&lcd);
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <process_command+0x16c>)
 8000a4a:	f7ff fdd1 	bl	80005f0 <Lcd_clear>
            Lcd_cursor(&lcd, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	4807      	ldr	r0, [pc, #28]	@ (8000a70 <process_command+0x16c>)
 8000a54:	f7ff fdb2 	bl	80005bc <Lcd_cursor>
            Lcd_string(&lcd, a);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <process_command+0x16c>)
 8000a60:	f7ff fd8c 	bl	800057c <Lcd_string>
}
 8000a64:	bf00      	nop
 8000a66:	3754      	adds	r7, #84	@ 0x54
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	0800278c 	.word	0x0800278c
 8000a70:	20000078 	.word	0x20000078
 8000a74:	08002794 	.word	0x08002794
 8000a78:	080027a4 	.word	0x080027a4
 8000a7c:	20000030 	.word	0x20000030
 8000a80:	080027a8 	.word	0x080027a8
 8000a84:	080027ac 	.word	0x080027ac

08000a88 <scroll_text>:

/* Scroll text on the LCD */
void scroll_text(char *text)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    int len = strlen(text);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff fb9f 	bl	80001d4 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	613b      	str	r3, [r7, #16]
    int count=2*len;
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]

    while(count>=0){
 8000aa0:	e04e      	b.n	8000b40 <scroll_text+0xb8>
    // Only proceed if enough time has passed for scrolling
    uint32_t current_time = HAL_GetTick();
 8000aa2:	f000 fa11 	bl	8000ec8 <HAL_GetTick>
 8000aa6:	60f8      	str	r0, [r7, #12]
    if (len > 16 && (current_time - last_scroll_time >= scroll_interval))
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b10      	cmp	r3, #16
 8000aac:	dd36      	ble.n	8000b1c <scroll_text+0x94>
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <scroll_text+0xcc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	1ad2      	subs	r2, r2, r3
 8000ab6:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <scroll_text+0xd0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d32e      	bcc.n	8000b1c <scroll_text+0x94>
    {
        // Update the display buffer with a 16-character window

        strncpy(display_buffer, text + scroll_position, 16);
 8000abe:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <scroll_text+0xd4>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	2210      	movs	r2, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	4824      	ldr	r0, [pc, #144]	@ (8000b60 <scroll_text+0xd8>)
 8000ace:	f001 fe09 	bl	80026e4 <strncpy>
        display_buffer[16] = '\0';    // Null-terminate for safety
 8000ad2:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <scroll_text+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	741a      	strb	r2, [r3, #16]

        // Clear the LCD and display the updated window
        Lcd_clear(&lcd);
 8000ad8:	4822      	ldr	r0, [pc, #136]	@ (8000b64 <scroll_text+0xdc>)
 8000ada:	f7ff fd89 	bl	80005f0 <Lcd_clear>
        Lcd_cursor(&lcd, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4820      	ldr	r0, [pc, #128]	@ (8000b64 <scroll_text+0xdc>)
 8000ae4:	f7ff fd6a 	bl	80005bc <Lcd_cursor>
        Lcd_string(&lcd, display_buffer);
 8000ae8:	491d      	ldr	r1, [pc, #116]	@ (8000b60 <scroll_text+0xd8>)
 8000aea:	481e      	ldr	r0, [pc, #120]	@ (8000b64 <scroll_text+0xdc>)
 8000aec:	f7ff fd46 	bl	800057c <Lcd_string>

        // Move scroll position, looping back if at the end
        scroll_position++;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <scroll_text+0xd4>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <scroll_text+0xd4>)
 8000afa:	701a      	strb	r2, [r3, #0]
        if (scroll_position > len - 16)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	3b0f      	subs	r3, #15
 8000b00:	4a16      	ldr	r2, [pc, #88]	@ (8000b5c <scroll_text+0xd4>)
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	dc02      	bgt.n	8000b0e <scroll_text+0x86>
            scroll_position = 0;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <scroll_text+0xd4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]

        // Update last scroll time
        last_scroll_time = current_time;
 8000b0e:	4a11      	ldr	r2, [pc, #68]	@ (8000b54 <scroll_text+0xcc>)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6013      	str	r3, [r2, #0]
        count--;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e011      	b.n	8000b40 <scroll_text+0xb8>
    }


    else if (len <= 16)  // If message fits in one screen, display without scrolling
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2b10      	cmp	r3, #16
 8000b20:	dc0e      	bgt.n	8000b40 <scroll_text+0xb8>
    {
        Lcd_clear(&lcd);
 8000b22:	4810      	ldr	r0, [pc, #64]	@ (8000b64 <scroll_text+0xdc>)
 8000b24:	f7ff fd64 	bl	80005f0 <Lcd_clear>
        Lcd_cursor(&lcd, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <scroll_text+0xdc>)
 8000b2e:	f7ff fd45 	bl	80005bc <Lcd_cursor>
        Lcd_string(&lcd, text);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	480b      	ldr	r0, [pc, #44]	@ (8000b64 <scroll_text+0xdc>)
 8000b36:	f7ff fd21 	bl	800057c <Lcd_string>
        scroll_position = 0; // Reset scroll position
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <scroll_text+0xd4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
    while(count>=0){
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	daad      	bge.n	8000aa2 <scroll_text+0x1a>
    }



}
Lcd_clear(&lcd);
 8000b46:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <scroll_text+0xdc>)
 8000b48:	f7ff fd52 	bl	80005f0 <Lcd_clear>
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000e8 	.word	0x200000e8
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	200000d4 	.word	0x200000d4
 8000b64:	20000078 	.word	0x20000078

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <MX_GPIO_Init+0x90>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf8 <MX_GPIO_Init+0x90>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_GPIO_Init+0x90>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_GPIO_Init+0x90>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a15      	ldr	r2, [pc, #84]	@ (8000bf8 <MX_GPIO_Init+0x90>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_GPIO_Init+0x90>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

    /* Configure GPIO pins for RS and E (PA1 and PA3) */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480b      	ldr	r0, [pc, #44]	@ (8000bfc <MX_GPIO_Init+0x94>)
 8000bce:	f000 fb4f 	bl	8001270 <HAL_GPIO_Init>

    /* Configure GPIO pins for D4-D7 (PB0, PB1, PB2, PB10) */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10;
 8000bd2:	f240 4307 	movw	r3, #1031	@ 0x407
 8000bd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_GPIO_Init+0x98>)
 8000bec:	f000 fb40 	bl	8001270 <HAL_GPIO_Init>
}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020400 	.word	0x40020400

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
    // Clock configuration code here
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c16:	b672      	cpsid	i
}
 8000c18:	bf00      	nop
    __disable_irq();
    while (1)
 8000c1a:	bf00      	nop
 8000c1c:	e7fd      	b.n	8000c1a <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d04 <HAL_UART_MspInit+0x94>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d134      	bne.n	8000cfc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <HAL_UART_MspInit+0x98>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d08 <HAL_UART_MspInit+0x98>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_UART_MspInit+0x98>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <HAL_UART_MspInit+0x98>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <HAL_UART_MspInit+0x98>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_UART_MspInit+0x98>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <HAL_UART_MspInit+0x9c>)
 8000ce8:	f000 fac2 	bl	8001270 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2025      	movs	r0, #37	@ 0x25
 8000cf2:	f000 f9f4 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf6:	2025      	movs	r0, #37	@ 0x25
 8000cf8:	f000 fa0d 	bl	8001116 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	@ 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d66:	f000 f89b 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <USART1_IRQHandler+0x10>)
 8000d76:	f000 fd4d 	bl	8001814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000030 	.word	0x20000030

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f001 fc99 	bl	800270c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fcb1 	bl	8000740 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dec:	080027d0 	.word	0x080027d0
  ldr r2, =_sbss
 8000df0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000df4:	200000f0 	.word	0x200000f0

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f94f 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fef6 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f967 	bl	8001132 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f92f 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	@ (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000010 	.word	0x20000010
 8000e9c:	2000000c 	.word	0x2000000c

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	200000ec 	.word	0x200000ec

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200000ec 	.word	0x200000ec

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000010 	.word	0x20000010

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	@ (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff3e 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff31 	bl	8000f8c <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff feb6 	bl	8000ec8 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d008      	beq.n	800117c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e052      	b.n	8001222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0216 	bic.w	r2, r2, #22
 800118a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800119a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <HAL_DMA_Abort+0x62>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011cc:	e013      	b.n	80011f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ce:	f7ff fe7b 	bl	8000ec8 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d90c      	bls.n	80011f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2220      	movs	r2, #32
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e015      	b.n	8001222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e4      	bne.n	80011ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001208:	223f      	movs	r2, #63	@ 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d004      	beq.n	8001248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e00c      	b.n	8001262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2205      	movs	r2, #5
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e159      	b.n	8001540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8148 	bne.w	800153a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d130      	bne.n	8001324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 0201 	and.w	r2, r3, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b03      	cmp	r3, #3
 800132e:	d017      	beq.n	8001360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a2 	beq.w	800153a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b57      	ldr	r3, [pc, #348]	@ (8001558 <HAL_GPIO_Init+0x2e8>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a56      	ldr	r2, [pc, #344]	@ (8001558 <HAL_GPIO_Init+0x2e8>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b54      	ldr	r3, [pc, #336]	@ (8001558 <HAL_GPIO_Init+0x2e8>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a52      	ldr	r2, [pc, #328]	@ (800155c <HAL_GPIO_Init+0x2ec>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a49      	ldr	r2, [pc, #292]	@ (8001560 <HAL_GPIO_Init+0x2f0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x202>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a48      	ldr	r2, [pc, #288]	@ (8001564 <HAL_GPIO_Init+0x2f4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1fe>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a47      	ldr	r2, [pc, #284]	@ (8001568 <HAL_GPIO_Init+0x2f8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1fa>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a46      	ldr	r2, [pc, #280]	@ (800156c <HAL_GPIO_Init+0x2fc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1f6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a45      	ldr	r2, [pc, #276]	@ (8001570 <HAL_GPIO_Init+0x300>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1f2>
 800145e:	2304      	movs	r3, #4
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001462:	2307      	movs	r3, #7
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	@ (800155c <HAL_GPIO_Init+0x2ec>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001574 <HAL_GPIO_Init+0x304>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <HAL_GPIO_Init+0x304>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a24      	ldr	r2, [pc, #144]	@ (8001574 <HAL_GPIO_Init+0x304>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_GPIO_Init+0x304>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1a      	ldr	r2, [pc, #104]	@ (8001574 <HAL_GPIO_Init+0x304>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a0f      	ldr	r2, [pc, #60]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f aea2 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	@ 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40013c00 	.word	0x40013c00

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008

080015c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015c8:	f7ff fff0 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	0a9b      	lsrs	r3, r3, #10
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	4903      	ldr	r1, [pc, #12]	@ (80015e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	080027b8 	.word	0x080027b8

080015ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015f0:	f7ff ffdc 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	0b5b      	lsrs	r3, r3, #13
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	4903      	ldr	r1, [pc, #12]	@ (8001610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001602:	5ccb      	ldrb	r3, [r1, r3]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	080027b8 	.word	0x080027b8

08001614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e042      	b.n	80016ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fb18 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2224      	movs	r2, #36	@ 0x24
 8001644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fdbd 	bl	80021d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800166c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800167c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800168c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d175      	bne.n	80017c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <HAL_UART_Transmit+0x2c>
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e06e      	b.n	80017c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2221      	movs	r2, #33	@ 0x21
 80016ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016f2:	f7ff fbe9 	bl	8000ec8 <HAL_GetTick>
 80016f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	88fa      	ldrh	r2, [r7, #6]
 8001702:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800170c:	d108      	bne.n	8001720 <HAL_UART_Transmit+0x6c>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d104      	bne.n	8001720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	e003      	b.n	8001728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001728:	e02e      	b.n	8001788 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2200      	movs	r2, #0
 8001732:	2180      	movs	r1, #128	@ 0x80
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fb1f 	bl	8001d78 <UART_WaitOnFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2220      	movs	r2, #32
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e03a      	b.n	80017c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10b      	bne.n	800176a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	3302      	adds	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	e007      	b.n	800177a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800178c:	b29b      	uxth	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1cb      	bne.n	800172a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2200      	movs	r2, #0
 800179a:	2140      	movs	r1, #64	@ 0x40
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 faeb 	bl	8001d78 <UART_WaitOnFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e006      	b.n	80017c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	4613      	mov	r3, r2
 80017d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b20      	cmp	r3, #32
 80017e2:	d112      	bne.n	800180a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_UART_Receive_IT+0x26>
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e00b      	b.n	800180c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	461a      	mov	r2, r3
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fb12 	bl	8001e2a <UART_Start_Receive_IT>
 8001806:	4603      	mov	r3, r0
 8001808:	e000      	b.n	800180c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0ba      	sub	sp, #232	@ 0xe8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10f      	bne.n	800187a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800185a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_UART_IRQHandler+0x66>
 8001866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fbf2 	bl	800205c <UART_Receive_IT>
      return;
 8001878:	e25b      	b.n	8001d32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800187a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80de 	beq.w	8001a40 <HAL_UART_IRQHandler+0x22c>
 8001884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001894:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80d1 	beq.w	8001a40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800189e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_UART_IRQHandler+0xae>
 80018aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_UART_IRQHandler+0xd2>
 80018ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f043 0202 	orr.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00b      	beq.n	800190a <HAL_UART_IRQHandler+0xf6>
 80018f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	f043 0204 	orr.w	r2, r3, #4
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800190a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d011      	beq.n	800193a <HAL_UART_IRQHandler+0x126>
 8001916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b00      	cmp	r3, #0
 8001920:	d105      	bne.n	800192e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f043 0208 	orr.w	r2, r3, #8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 81f2 	beq.w	8001d28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_UART_IRQHandler+0x14e>
 8001950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fb7d 	bl	800205c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196c:	2b40      	cmp	r3, #64	@ 0x40
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_UART_IRQHandler+0x17a>
 8001986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d04f      	beq.n	8001a2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fa85 	bl	8001e9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800199e:	2b40      	cmp	r3, #64	@ 0x40
 80019a0:	d141      	bne.n	8001a26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3314      	adds	r3, #20
 80019a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019b0:	e853 3f00 	ldrex	r3, [r3]
 80019b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80019b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80019c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3314      	adds	r3, #20
 80019ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80019ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80019d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80019da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80019de:	e841 2300 	strex	r3, r2, [r1]
 80019e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80019e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1d9      	bne.n	80019a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d013      	beq.n	8001a1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fa:	4a7e      	ldr	r2, [pc, #504]	@ (8001bf4 <HAL_UART_IRQHandler+0x3e0>)
 80019fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fc11 	bl	800122a <HAL_DMA_Abort_IT>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a1c:	e00e      	b.n	8001a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f994 	bl	8001d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a24:	e00a      	b.n	8001a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f990 	bl	8001d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a2c:	e006      	b.n	8001a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f98c 	bl	8001d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001a3a:	e175      	b.n	8001d28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a3c:	bf00      	nop
    return;
 8001a3e:	e173      	b.n	8001d28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f040 814f 	bne.w	8001ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8148 	beq.w	8001ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8141 	beq.w	8001ce8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a86:	2b40      	cmp	r3, #64	@ 0x40
 8001a88:	f040 80b6 	bne.w	8001bf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8145 	beq.w	8001d2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	f080 813e 	bcs.w	8001d2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ac2:	f000 8088 	beq.w	8001bd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	330c      	adds	r3, #12
 8001acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ad4:	e853 3f00 	ldrex	r3, [r3]
 8001ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	330c      	adds	r3, #12
 8001aee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b02:	e841 2300 	strex	r3, r2, [r1]
 8001b06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1d9      	bne.n	8001ac6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3314      	adds	r3, #20
 8001b18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b1c:	e853 3f00 	ldrex	r3, [r3]
 8001b20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001b22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3314      	adds	r3, #20
 8001b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001b42:	e841 2300 	strex	r3, r2, [r1]
 8001b46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001b48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e1      	bne.n	8001b12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3314      	adds	r3, #20
 8001b54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b58:	e853 3f00 	ldrex	r3, [r3]
 8001b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3314      	adds	r3, #20
 8001b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001b72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001b78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b7a:	e841 2300 	strex	r3, r2, [r1]
 8001b7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1e3      	bne.n	8001b4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	330c      	adds	r3, #12
 8001b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b9e:	e853 3f00 	ldrex	r3, [r3]
 8001ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba6:	f023 0310 	bic.w	r3, r3, #16
 8001baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	330c      	adds	r3, #12
 8001bb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001bb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001bba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001bc0:	e841 2300 	strex	r3, r2, [r1]
 8001bc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e3      	bne.n	8001b94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff faba 	bl	800114a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8b7 	bl	8001d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001bf2:	e09b      	b.n	8001d2c <HAL_UART_IRQHandler+0x518>
 8001bf4:	08001f65 	.word	0x08001f65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 808e 	beq.w	8001d30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8089 	beq.w	8001d30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	330c      	adds	r3, #12
 8001c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c28:	e853 3f00 	ldrex	r3, [r3]
 8001c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	330c      	adds	r3, #12
 8001c3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001c42:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c4a:	e841 2300 	strex	r3, r2, [r1]
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1e3      	bne.n	8001c1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3314      	adds	r3, #20
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	e853 3f00 	ldrex	r3, [r3]
 8001c64:	623b      	str	r3, [r7, #32]
   return(result);
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3314      	adds	r3, #20
 8001c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c82:	e841 2300 	strex	r3, r2, [r1]
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e3      	bne.n	8001c56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	e853 3f00 	ldrex	r3, [r3]
 8001caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 0310 	bic.w	r3, r3, #16
 8001cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	330c      	adds	r3, #12
 8001cbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001cc0:	61fa      	str	r2, [r7, #28]
 8001cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc4:	69b9      	ldr	r1, [r7, #24]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	e841 2300 	strex	r3, r2, [r1]
 8001ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e3      	bne.n	8001c9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f83d 	bl	8001d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001ce6:	e023      	b.n	8001d30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <HAL_UART_IRQHandler+0x4f4>
 8001cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f943 	bl	8001f8c <UART_Transmit_IT>
    return;
 8001d06:	e014      	b.n	8001d32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00e      	beq.n	8001d32 <HAL_UART_IRQHandler+0x51e>
 8001d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f983 	bl	800202c <UART_EndTransmit_IT>
    return;
 8001d26:	e004      	b.n	8001d32 <HAL_UART_IRQHandler+0x51e>
    return;
 8001d28:	bf00      	nop
 8001d2a:	e002      	b.n	8001d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8001d2c:	bf00      	nop
 8001d2e:	e000      	b.n	8001d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8001d30:	bf00      	nop
  }
}
 8001d32:	37e8      	adds	r7, #232	@ 0xe8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d88:	e03b      	b.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d037      	beq.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d92:	f7ff f899 	bl	8000ec8 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	6a3a      	ldr	r2, [r7, #32]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d302      	bcc.n	8001da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e03a      	b.n	8001e22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d023      	beq.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b80      	cmp	r3, #128	@ 0x80
 8001dbe:	d020      	beq.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b40      	cmp	r3, #64	@ 0x40
 8001dc4:	d01d      	beq.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d116      	bne.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f857 	bl	8001e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2208      	movs	r2, #8
 8001df4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	bf0c      	ite	eq
 8001e12:	2301      	moveq	r3, #1
 8001e14:	2300      	movne	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d0b4      	beq.n	8001d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	4613      	mov	r3, r2
 8001e36:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	88fa      	ldrh	r2, [r7, #6]
 8001e48:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2222      	movs	r2, #34	@ 0x22
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e6e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0220 	orr.w	r2, r2, #32
 8001e8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b095      	sub	sp, #84	@ 0x54
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	330c      	adds	r3, #12
 8001eac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb0:	e853 3f00 	ldrex	r3, [r3]
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ecc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ece:	e841 2300 	strex	r3, r2, [r1]
 8001ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e5      	bne.n	8001ea6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	e853 3f00 	ldrex	r3, [r3]
 8001ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3314      	adds	r3, #20
 8001ef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001efa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f02:	e841 2300 	strex	r3, r2, [r1]
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1e5      	bne.n	8001eda <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d119      	bne.n	8001f4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	330c      	adds	r3, #12
 8001f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	e853 3f00 	ldrex	r3, [r3]
 8001f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f023 0310 	bic.w	r3, r3, #16
 8001f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	330c      	adds	r3, #12
 8001f34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f36:	61ba      	str	r2, [r7, #24]
 8001f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3a:	6979      	ldr	r1, [r7, #20]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	e841 2300 	strex	r3, r2, [r1]
 8001f42:	613b      	str	r3, [r7, #16]
   return(result);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1e5      	bne.n	8001f16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f58:	bf00      	nop
 8001f5a:	3754      	adds	r7, #84	@ 0x54
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff fee4 	bl	8001d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b21      	cmp	r3, #33	@ 0x21
 8001f9e:	d13e      	bne.n	800201e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fa8:	d114      	bne.n	8001fd4 <UART_Transmit_IT+0x48>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d110      	bne.n	8001fd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	1c9a      	adds	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	621a      	str	r2, [r3, #32]
 8001fd2:	e008      	b.n	8001fe6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	1c59      	adds	r1, r3, #1
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6211      	str	r1, [r2, #32]
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002008:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002018:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800201e:	2302      	movs	r3, #2
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002042:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fe73 	bl	8001d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b22      	cmp	r3, #34	@ 0x22
 800206e:	f040 80ae 	bne.w	80021ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800207a:	d117      	bne.n	80020ac <UART_Receive_IT+0x50>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d113      	bne.n	80020ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800209a:	b29a      	uxth	r2, r3
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	1c9a      	adds	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80020aa:	e026      	b.n	80020fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020be:	d007      	beq.n	80020d0 <UART_Receive_IT+0x74>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <UART_Receive_IT+0x82>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e008      	b.n	80020f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4619      	mov	r1, r3
 8002108:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800210a:	2b00      	cmp	r3, #0
 800210c:	d15d      	bne.n	80021ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0220 	bic.w	r2, r2, #32
 800211c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800212c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	2b01      	cmp	r3, #1
 8002152:	d135      	bne.n	80021c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	330c      	adds	r3, #12
 8002160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	e853 3f00 	ldrex	r3, [r3]
 8002168:	613b      	str	r3, [r7, #16]
   return(result);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f023 0310 	bic.w	r3, r3, #16
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	330c      	adds	r3, #12
 8002178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217a:	623a      	str	r2, [r7, #32]
 800217c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217e:	69f9      	ldr	r1, [r7, #28]
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	e841 2300 	strex	r3, r2, [r1]
 8002186:	61bb      	str	r3, [r7, #24]
   return(result);
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1e5      	bne.n	800215a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b10      	cmp	r3, #16
 800219a:	d10a      	bne.n	80021b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fdd1 	bl	8001d60 <HAL_UARTEx_RxEventCallback>
 80021be:	e002      	b.n	80021c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe fb5d 	bl	8000880 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e002      	b.n	80021d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3730      	adds	r7, #48	@ 0x30
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b0c0      	sub	sp, #256	@ 0x100
 80021de:	af00      	add	r7, sp, #0
 80021e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80021f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021f4:	68d9      	ldr	r1, [r3, #12]
 80021f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	ea40 0301 	orr.w	r3, r0, r1
 8002200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	431a      	orrs	r2, r3
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	431a      	orrs	r2, r3
 8002218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002230:	f021 010c 	bic.w	r1, r1, #12
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800223e:	430b      	orrs	r3, r1
 8002240:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800224e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002252:	6999      	ldr	r1, [r3, #24]
 8002254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	ea40 0301 	orr.w	r3, r0, r1
 800225e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b8f      	ldr	r3, [pc, #572]	@ (80024a4 <UART_SetConfig+0x2cc>)
 8002268:	429a      	cmp	r2, r3
 800226a:	d005      	beq.n	8002278 <UART_SetConfig+0xa0>
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b8d      	ldr	r3, [pc, #564]	@ (80024a8 <UART_SetConfig+0x2d0>)
 8002274:	429a      	cmp	r2, r3
 8002276:	d104      	bne.n	8002282 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002278:	f7ff f9b8 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 800227c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002280:	e003      	b.n	800228a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002282:	f7ff f99f 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8002286:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800228a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002294:	f040 810c 	bne.w	80024b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800229c:	2200      	movs	r2, #0
 800229e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	1891      	adds	r1, r2, r2
 80022b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80022b2:	415b      	adcs	r3, r3
 80022b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022ba:	4621      	mov	r1, r4
 80022bc:	eb12 0801 	adds.w	r8, r2, r1
 80022c0:	4629      	mov	r1, r5
 80022c2:	eb43 0901 	adc.w	r9, r3, r1
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022da:	4690      	mov	r8, r2
 80022dc:	4699      	mov	r9, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	eb18 0303 	adds.w	r3, r8, r3
 80022e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80022e8:	462b      	mov	r3, r5
 80022ea:	eb49 0303 	adc.w	r3, r9, r3
 80022ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80022f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80022fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002306:	460b      	mov	r3, r1
 8002308:	18db      	adds	r3, r3, r3
 800230a:	653b      	str	r3, [r7, #80]	@ 0x50
 800230c:	4613      	mov	r3, r2
 800230e:	eb42 0303 	adc.w	r3, r2, r3
 8002312:	657b      	str	r3, [r7, #84]	@ 0x54
 8002314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002318:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800231c:	f7fd ff62 	bl	80001e4 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4b61      	ldr	r3, [pc, #388]	@ (80024ac <UART_SetConfig+0x2d4>)
 8002326:	fba3 2302 	umull	r2, r3, r3, r2
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	011c      	lsls	r4, r3, #4
 800232e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002332:	2200      	movs	r2, #0
 8002334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002338:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800233c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002340:	4642      	mov	r2, r8
 8002342:	464b      	mov	r3, r9
 8002344:	1891      	adds	r1, r2, r2
 8002346:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002348:	415b      	adcs	r3, r3
 800234a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800234c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002350:	4641      	mov	r1, r8
 8002352:	eb12 0a01 	adds.w	sl, r2, r1
 8002356:	4649      	mov	r1, r9
 8002358:	eb43 0b01 	adc.w	fp, r3, r1
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002368:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800236c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002370:	4692      	mov	sl, r2
 8002372:	469b      	mov	fp, r3
 8002374:	4643      	mov	r3, r8
 8002376:	eb1a 0303 	adds.w	r3, sl, r3
 800237a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800237e:	464b      	mov	r3, r9
 8002380:	eb4b 0303 	adc.w	r3, fp, r3
 8002384:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002394:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002398:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800239c:	460b      	mov	r3, r1
 800239e:	18db      	adds	r3, r3, r3
 80023a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80023a2:	4613      	mov	r3, r2
 80023a4:	eb42 0303 	adc.w	r3, r2, r3
 80023a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80023aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80023b2:	f7fd ff17 	bl	80001e4 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	4b3b      	ldr	r3, [pc, #236]	@ (80024ac <UART_SetConfig+0x2d4>)
 80023be:	fba3 2301 	umull	r2, r3, r3, r1
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2264      	movs	r2, #100	@ 0x64
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	1acb      	subs	r3, r1, r3
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023d2:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <UART_SetConfig+0x2d4>)
 80023d4:	fba3 2302 	umull	r2, r3, r3, r2
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80023e0:	441c      	add	r4, r3
 80023e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023e6:	2200      	movs	r2, #0
 80023e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80023f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80023f4:	4642      	mov	r2, r8
 80023f6:	464b      	mov	r3, r9
 80023f8:	1891      	adds	r1, r2, r2
 80023fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023fc:	415b      	adcs	r3, r3
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002404:	4641      	mov	r1, r8
 8002406:	1851      	adds	r1, r2, r1
 8002408:	6339      	str	r1, [r7, #48]	@ 0x30
 800240a:	4649      	mov	r1, r9
 800240c:	414b      	adcs	r3, r1
 800240e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800241c:	4659      	mov	r1, fp
 800241e:	00cb      	lsls	r3, r1, #3
 8002420:	4651      	mov	r1, sl
 8002422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002426:	4651      	mov	r1, sl
 8002428:	00ca      	lsls	r2, r1, #3
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	4603      	mov	r3, r0
 8002430:	4642      	mov	r2, r8
 8002432:	189b      	adds	r3, r3, r2
 8002434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002438:	464b      	mov	r3, r9
 800243a:	460a      	mov	r2, r1
 800243c:	eb42 0303 	adc.w	r3, r2, r3
 8002440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002450:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002458:	460b      	mov	r3, r1
 800245a:	18db      	adds	r3, r3, r3
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800245e:	4613      	mov	r3, r2
 8002460:	eb42 0303 	adc.w	r3, r2, r3
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800246a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800246e:	f7fd feb9 	bl	80001e4 <__aeabi_uldivmod>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <UART_SetConfig+0x2d4>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2164      	movs	r1, #100	@ 0x64
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	3332      	adds	r3, #50	@ 0x32
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <UART_SetConfig+0x2d4>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 0207 	and.w	r2, r3, #7
 8002496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4422      	add	r2, r4
 800249e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024a0:	e106      	b.n	80026b0 <UART_SetConfig+0x4d8>
 80024a2:	bf00      	nop
 80024a4:	40011000 	.word	0x40011000
 80024a8:	40011400 	.word	0x40011400
 80024ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024b4:	2200      	movs	r2, #0
 80024b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80024be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80024c2:	4642      	mov	r2, r8
 80024c4:	464b      	mov	r3, r9
 80024c6:	1891      	adds	r1, r2, r2
 80024c8:	6239      	str	r1, [r7, #32]
 80024ca:	415b      	adcs	r3, r3
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024d2:	4641      	mov	r1, r8
 80024d4:	1854      	adds	r4, r2, r1
 80024d6:	4649      	mov	r1, r9
 80024d8:	eb43 0501 	adc.w	r5, r3, r1
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	00eb      	lsls	r3, r5, #3
 80024e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ea:	00e2      	lsls	r2, r4, #3
 80024ec:	4614      	mov	r4, r2
 80024ee:	461d      	mov	r5, r3
 80024f0:	4643      	mov	r3, r8
 80024f2:	18e3      	adds	r3, r4, r3
 80024f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024f8:	464b      	mov	r3, r9
 80024fa:	eb45 0303 	adc.w	r3, r5, r3
 80024fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800250e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800251e:	4629      	mov	r1, r5
 8002520:	008b      	lsls	r3, r1, #2
 8002522:	4621      	mov	r1, r4
 8002524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002528:	4621      	mov	r1, r4
 800252a:	008a      	lsls	r2, r1, #2
 800252c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002530:	f7fd fe58 	bl	80001e4 <__aeabi_uldivmod>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4b60      	ldr	r3, [pc, #384]	@ (80026bc <UART_SetConfig+0x4e4>)
 800253a:	fba3 2302 	umull	r2, r3, r3, r2
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	011c      	lsls	r4, r3, #4
 8002542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002546:	2200      	movs	r2, #0
 8002548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800254c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002550:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002554:	4642      	mov	r2, r8
 8002556:	464b      	mov	r3, r9
 8002558:	1891      	adds	r1, r2, r2
 800255a:	61b9      	str	r1, [r7, #24]
 800255c:	415b      	adcs	r3, r3
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002564:	4641      	mov	r1, r8
 8002566:	1851      	adds	r1, r2, r1
 8002568:	6139      	str	r1, [r7, #16]
 800256a:	4649      	mov	r1, r9
 800256c:	414b      	adcs	r3, r1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800257c:	4659      	mov	r1, fp
 800257e:	00cb      	lsls	r3, r1, #3
 8002580:	4651      	mov	r1, sl
 8002582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002586:	4651      	mov	r1, sl
 8002588:	00ca      	lsls	r2, r1, #3
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	4603      	mov	r3, r0
 8002590:	4642      	mov	r2, r8
 8002592:	189b      	adds	r3, r3, r2
 8002594:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002598:	464b      	mov	r3, r9
 800259a:	460a      	mov	r2, r1
 800259c:	eb42 0303 	adc.w	r3, r2, r3
 80025a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80025bc:	4649      	mov	r1, r9
 80025be:	008b      	lsls	r3, r1, #2
 80025c0:	4641      	mov	r1, r8
 80025c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025c6:	4641      	mov	r1, r8
 80025c8:	008a      	lsls	r2, r1, #2
 80025ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80025ce:	f7fd fe09 	bl	80001e4 <__aeabi_uldivmod>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	4b38      	ldr	r3, [pc, #224]	@ (80026bc <UART_SetConfig+0x4e4>)
 80025da:	fba3 2301 	umull	r2, r3, r3, r1
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2264      	movs	r2, #100	@ 0x64
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	1acb      	subs	r3, r1, r3
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	3332      	adds	r3, #50	@ 0x32
 80025ec:	4a33      	ldr	r2, [pc, #204]	@ (80026bc <UART_SetConfig+0x4e4>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025f8:	441c      	add	r4, r3
 80025fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025fe:	2200      	movs	r2, #0
 8002600:	673b      	str	r3, [r7, #112]	@ 0x70
 8002602:	677a      	str	r2, [r7, #116]	@ 0x74
 8002604:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002608:	4642      	mov	r2, r8
 800260a:	464b      	mov	r3, r9
 800260c:	1891      	adds	r1, r2, r2
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	415b      	adcs	r3, r3
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002618:	4641      	mov	r1, r8
 800261a:	1851      	adds	r1, r2, r1
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	4649      	mov	r1, r9
 8002620:	414b      	adcs	r3, r1
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002630:	4659      	mov	r1, fp
 8002632:	00cb      	lsls	r3, r1, #3
 8002634:	4651      	mov	r1, sl
 8002636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800263a:	4651      	mov	r1, sl
 800263c:	00ca      	lsls	r2, r1, #3
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	4603      	mov	r3, r0
 8002644:	4642      	mov	r2, r8
 8002646:	189b      	adds	r3, r3, r2
 8002648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800264a:	464b      	mov	r3, r9
 800264c:	460a      	mov	r2, r1
 800264e:	eb42 0303 	adc.w	r3, r2, r3
 8002652:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	663b      	str	r3, [r7, #96]	@ 0x60
 800265e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800266c:	4649      	mov	r1, r9
 800266e:	008b      	lsls	r3, r1, #2
 8002670:	4641      	mov	r1, r8
 8002672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002676:	4641      	mov	r1, r8
 8002678:	008a      	lsls	r2, r1, #2
 800267a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800267e:	f7fd fdb1 	bl	80001e4 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <UART_SetConfig+0x4e4>)
 8002688:	fba3 1302 	umull	r1, r3, r3, r2
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	2164      	movs	r1, #100	@ 0x64
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	3332      	adds	r3, #50	@ 0x32
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <UART_SetConfig+0x4e4>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4422      	add	r2, r4
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80026b6:	46bd      	mov	sp, r7
 80026b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026bc:	51eb851f 	.word	0x51eb851f

080026c0 <strncmp>:
 80026c0:	b510      	push	{r4, lr}
 80026c2:	b16a      	cbz	r2, 80026e0 <strncmp+0x20>
 80026c4:	3901      	subs	r1, #1
 80026c6:	1884      	adds	r4, r0, r2
 80026c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d103      	bne.n	80026dc <strncmp+0x1c>
 80026d4:	42a0      	cmp	r0, r4
 80026d6:	d001      	beq.n	80026dc <strncmp+0x1c>
 80026d8:	2a00      	cmp	r2, #0
 80026da:	d1f5      	bne.n	80026c8 <strncmp+0x8>
 80026dc:	1ad0      	subs	r0, r2, r3
 80026de:	bd10      	pop	{r4, pc}
 80026e0:	4610      	mov	r0, r2
 80026e2:	e7fc      	b.n	80026de <strncmp+0x1e>

080026e4 <strncpy>:
 80026e4:	b510      	push	{r4, lr}
 80026e6:	3901      	subs	r1, #1
 80026e8:	4603      	mov	r3, r0
 80026ea:	b132      	cbz	r2, 80026fa <strncpy+0x16>
 80026ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80026f0:	f803 4b01 	strb.w	r4, [r3], #1
 80026f4:	3a01      	subs	r2, #1
 80026f6:	2c00      	cmp	r4, #0
 80026f8:	d1f7      	bne.n	80026ea <strncpy+0x6>
 80026fa:	441a      	add	r2, r3
 80026fc:	2100      	movs	r1, #0
 80026fe:	4293      	cmp	r3, r2
 8002700:	d100      	bne.n	8002704 <strncpy+0x20>
 8002702:	bd10      	pop	{r4, pc}
 8002704:	f803 1b01 	strb.w	r1, [r3], #1
 8002708:	e7f9      	b.n	80026fe <strncpy+0x1a>
	...

0800270c <__libc_init_array>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	4d0d      	ldr	r5, [pc, #52]	@ (8002744 <__libc_init_array+0x38>)
 8002710:	4c0d      	ldr	r4, [pc, #52]	@ (8002748 <__libc_init_array+0x3c>)
 8002712:	1b64      	subs	r4, r4, r5
 8002714:	10a4      	asrs	r4, r4, #2
 8002716:	2600      	movs	r6, #0
 8002718:	42a6      	cmp	r6, r4
 800271a:	d109      	bne.n	8002730 <__libc_init_array+0x24>
 800271c:	4d0b      	ldr	r5, [pc, #44]	@ (800274c <__libc_init_array+0x40>)
 800271e:	4c0c      	ldr	r4, [pc, #48]	@ (8002750 <__libc_init_array+0x44>)
 8002720:	f000 f818 	bl	8002754 <_init>
 8002724:	1b64      	subs	r4, r4, r5
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	2600      	movs	r6, #0
 800272a:	42a6      	cmp	r6, r4
 800272c:	d105      	bne.n	800273a <__libc_init_array+0x2e>
 800272e:	bd70      	pop	{r4, r5, r6, pc}
 8002730:	f855 3b04 	ldr.w	r3, [r5], #4
 8002734:	4798      	blx	r3
 8002736:	3601      	adds	r6, #1
 8002738:	e7ee      	b.n	8002718 <__libc_init_array+0xc>
 800273a:	f855 3b04 	ldr.w	r3, [r5], #4
 800273e:	4798      	blx	r3
 8002740:	3601      	adds	r6, #1
 8002742:	e7f2      	b.n	800272a <__libc_init_array+0x1e>
 8002744:	080027c8 	.word	0x080027c8
 8002748:	080027c8 	.word	0x080027c8
 800274c:	080027c8 	.word	0x080027c8
 8002750:	080027cc 	.word	0x080027cc

08002754 <_init>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr

08002760 <_fini>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr
